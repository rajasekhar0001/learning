Thread synchronization:
----------------------------------------
    Thread synchronization- It refers to the concept where only one thread is executed 
at a time while other threads are in the waiting state. This process is called thread 
synchronization. It is used because it avoids interference of thread and the problem 
of inconsistency.

âš¡ In simple words:
Thread synchronization = coordinating threads when they depend on each other.
If threads donâ€™t share data or depend on each other â†’ no synchronization needed.


ðŸ”¹ Synchronization Mechanisms

    std::mutex â†’ mutual exclusion, protects critical sections.

    std::lock_guard â†’ RAII wrapper, simple lock/unlock.

    std::unique_lock â†’ flexible lock, works with condition variables.

    std::scoped_lock â†’ C++17, locks multiple mutexes safely.

    std::shared_mutex + std::shared_lock â†’ multiple readers, single writer.

    std::condition_variable â†’ wait/notify threads, requires unique_lock.

    std::atomic â†’ lock-free, safe single variable updates.
    

ðŸ”¹ Async Mechanisms

    std::thread â†’ run function concurrently.

    std::promise + std::future â†’ one thread sets value, another waits/gets it.

    std::async â†’ launch task asynchronously, returns future (handles threads for you).