
ðŸ”¹ 1. Traversal Problems
    These problems involve visiting all or some nodes of the graph.

    Depth-First Search (DFS)

    Breadth-First Search (BFS)

    Examples:

    Find connected components

    Check if a path exists between two nodes

    Maze solving

ðŸ”¹ 2. Shortest Path Problems
    These involve finding the path with the minimum cost/distance.

    Dijkstraâ€™s Algorithm â€“ for non-negative weights

    Bellman-Ford Algorithm â€“ allows negative weights

    Floyd-Warshall Algorithm â€“ all pairs shortest path

    A* Search â€“ heuristic-based

    Examples:

        Shortest path in road maps

    Flight routing

    Pathfinding in games

ðŸ”¹ 3. Minimum Spanning Tree (MST)
    Used to find the minimum cost to connect all nodes.

    Kruskalâ€™s Algorithm

    Primâ€™s Algorithm

    Examples:

    Network design (telecom, electrical grids)

    Clustering

ðŸ”¹ 4. Cycle Detection
    Find if a graph contains any cycles.

    DFS-based detection (for both directed and undirected graphs)

    Union-Find (for undirected graphs)

    Examples:

    Deadlock detection

    Detecting infinite loops in software

ðŸ”¹ 5. Topological Sorting
    Ordering of nodes in a Directed Acyclic Graph (DAG) such that for every edge u â†’ v, u comes before v.

    Kahnâ€™s Algorithm (BFS-based)

    DFS-based topological sort

    Examples:

    Task scheduling

    Build systems (e.g., makefiles)

    Course prerequisite planning

ðŸ”¹ 6. Connectivity Problems
    Check if nodes are connected or how strongly they are connected.

    Connected components (Undirected Graph)

    Strongly Connected Components (SCC) â€“ Kosaraju's, Tarjan's algorithm

    Examples:

    Social networks (friend circles)

    Communication networks

ðŸ”¹ 7. Graph Coloring
    Assign colors to vertices such that no two adjacent vertices have the same color.

    Examples:

    Register allocation

    Map coloring

    Sudoku solving

ðŸ”¹ 8. Bipartite Graph Checking
    Determine if a graph can be colored using 2 colors without adjacent nodes sharing the same color.

    Examples:

    Matching problems

    Job assignments

ðŸ”¹ 9. Matching & Flow Problems
    Find maximum matches or flows between nodes.

    Ford-Fulkerson, Edmonds-Karp (Max Flow)

    Hungarian Algorithm (Assignment)

    Hopcroft-Karp (Bipartite Matching)

    Examples:

    Job matching

    Network traffic optimization

    Sports tournaments

ðŸ”¹ 10. Bridges and Articulation Points
    Find edges/nodes whose removal increases the number of connected components.

    Tarjan's Algorithm (DFS-based)

    Examples:

    Network reliability

    Critical infrastructure analysis

ðŸ”¹ 11. Eulerian and Hamiltonian Paths
    Eulerian Path: Visit every edge once

    Hamiltonian Path: Visit every node once

    Examples:

    Route inspection

    Traveling salesman (variation)

ðŸ”¹ 12. Grid-Based Graph Problems
    Grids (2D or 3D) can be modeled as graphs where each cell is a node.

    Examples:

    Islands count (DFS/BFS)

    Flood fill

    Pathfinding (A*)

ðŸ”¹ 13. Dynamic Graph Problems
    Graphs that change over time (adding/removing edges or nodes).

    Examples:

    Dynamic connectivity

    Online graph queries

